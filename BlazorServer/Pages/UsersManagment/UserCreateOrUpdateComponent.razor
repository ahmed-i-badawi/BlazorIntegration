@using BlazorServer.Services
@using System.Net.Http.Headers
@inject ApiService _apiService
@inject IConfiguration configuration
@using FluentValidation;
@using FluentValidation.Validators;
@using AutoMapper;
@using SharedLibrary.Arguments
@inject IMapper _mapper
@using SharedLibrary.Enums
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

<div>

    @if (FModel != null)
    {
        <div>
            <BreadCrumbComponent Items="BreadCrumbItems" />
        </div>

        @if (EditModel == null)
        {
            @*BreadCrumbItems.Add(new Tuple<string, string, bool>("Add New User", "", true));*@
        }
        else
        {
            BreadCrumbItems.Add(new Tuple<string, string, bool>($"Edit User {FModel.Id}", "", true));
        }

        <EditForm OnValidSubmit="Submit" Model="FModel">
            <FluentValidator />
            <div class="row">
                <div class="col-6">
                    <InputText readonly="@IsEdit" id="UserName" class="form-control" @bind-Value="@FModel.UserName" placeholder="UserName" /><br />
                    <ValidationMessage For="() => FModel.UserName"></ValidationMessage>
                </div>
                <div class="col-6">
                    <InputText readonly="@IsEdit" id="FullName" class="form-control" @bind-Value="@FModel.FullName" placeholder="FullName" /><br />
                    <ValidationMessage For="() => FModel.FullName"></ValidationMessage>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="e-input-group">
                        <div class="e-input-in-wrap">
                            <InputText readonly="@IsEdit" class='form-control' type="@TxtFirstType" id="Password" @bind-Value="@FModel.Password" placeholder="Password" /><br />
                        </div>
                        <span class="e-input-group-icon e-input-eye" @onclick="ShowPassword"></span>
                    </div>
                    <ValidationMessage For="() => FModel.Password"></ValidationMessage>
                </div>
                <div class="col-6">
                    <div class="e-input-group">
                        <div class="e-input-in-wrap">
                            <InputText readonly="@IsEdit" class='form-control' type="@TxtSecondType" id="ConfirmPassword" @bind-Value="@FModel.ConfirmPassword" placeholder="ConfirmPassword" /><br />
                        </div>
                        <span class="e-input-group-icon e-input-eye" @onclick="ShowConfirmationPassword"></span>
                    </div>
                    <ValidationMessage For="() => FModel.ConfirmPassword"></ValidationMessage>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <InputText readonly="@IsEdit" id="Email" class="form-control" @bind-Value="@FModel.Email" placeholder="Email" /><br />
                    <ValidationMessage For="() => FModel.Email"></ValidationMessage>
                </div>
                <div class="col-6">
                    <input readonly="@IsEdit" type="checkbox" id="IsActive" class="form-control" @bind-value="@FModel.IsActive" placeholder="IsActive" /><br />
                    <ValidationMessage For="() => FModel.IsActive"></ValidationMessage>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <SfDropDownList TValue="int" TItem="LookupDto" @bind-Value="@FModel.UserType" AllowFiltering="true" Placeholder="Select a User Type">
                        <SfDataManager Url="@($"api/Lookup/GetLookup?Key={(int)LookupEnums.UserTypes}")" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                        <DropDownListFieldSettings Text="Name" Value="Id" />
                        <DropDownListEvents TValue="int" TItem="LookupDto" ValueChange="UserTypeOnChange"></DropDownListEvents>
                    </SfDropDownList>
                    <ValidationMessage For="() => FModel.UserType"></ValidationMessage>
                </div>
                <div class="col-6">
                    @if (FModel.UserType == (int)UserType.Site)
                    {
                        <SfDropDownList TValue="int?" TItem="SiteDto" @bind-Value="@FModel.SiteId" AllowFiltering="true" Query="SiteRemoteDataQuery" Placeholder="Select a Site">
                            <SfDataManager Url="api/UsersManagement/GetSitesDropDownList" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                            <DropDownListFieldSettings Text="Name" Value="Id" />
                        </SfDropDownList>
                        <ValidationMessage For="() => FModel.SiteId"></ValidationMessage>
                    }
                    else if (FModel.UserType == (int)UserType.Integrator)
                    {
                        <SfDropDownList TValue="string" TItem="IntegratorsDto" @bind-Value="@FModel.IntegratorHash" AllowFiltering="true" Query="IntegratorRemoteDataQuery" Placeholder="Select an Integrator">
                            <SfDataManager Url="api/UsersManagement/GetIntegratorsDropDownList" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                            <DropDownListFieldSettings Text="Name" Value="Hash" />
                        </SfDropDownList>
                        <ValidationMessage For="() => FModel.IntegratorHash"></ValidationMessage>
                    }
                </div>
            </div>
              <div class="row">
                <div class="col-6">
                </div>
                <div class="col-6">
                    <input readonly="@IsEdit" type="checkbox" id="IsSendMail" class="form-control" @bind-value="@FModel.IsSendMail" placeholder="IsSendMail" /><br />
                    <ValidationMessage For="() => FModel.IsSendMail"></ValidationMessage>
                </div>
                <div class="col-6">
                </div>
            </div>

            <button id="Save" type="submit" class="btn btn-primary">Submit</button>
            <button id="Cancel" type="button" @onclick="CancelClick" class="btn btn-danger">Cancel</button>
        </EditForm>
    }
</div>

@code {

    private List<Tuple<string, string, bool>> BreadCrumbItems { get; set; } = new List<Tuple<string, string, bool>>()
    {
        new Tuple<string, string, bool>("Dashboard", "/", false ),
        new Tuple<string, string, bool>("Users", "/Users", true )
    };

    public string TxtFirstType = "password";
    public string TxtSecondType = "password";

    public void ShowPassword()
    {
        if (this.TxtFirstType == "password")
        {
            this.TxtFirstType = "text";
        }
        else
        {
            this.TxtFirstType = "password";
        }
    }

    public void ShowConfirmationPassword()
    {
        if (this.TxtSecondType == "password")
        {
            this.TxtSecondType = "text";
        }
        else
        {
            this.TxtSecondType = "password";
        }
    }


    public UserCreateFM FModel { get; set; } = null;
    [Parameter]
    public UserCreateFM EditModel { get; set; }
    public SubmitClickedArg SubmitClickedArguments { get; set; }
    [Parameter]
    public EventCallback OnCancelClicked { get; set; }
    [Parameter]
    public EventCallback<SubmitClickedArg> OnSubmitClicked { get; set; }

    public bool IsEdit { get; set; } = false;

    public Query SiteRemoteDataQuery = new Query();
    public Query IntegratorRemoteDataQuery = new Query();

    protected override async Task OnInitializedAsync()
    {
        SiteRemoteDataQuery.AddParams("take", 6);
        IntegratorRemoteDataQuery.AddParams("take", 6);

        if (EditModel == null)
        {
            IsEdit = false;
            FModel = new UserCreateFM();
        }
        else
        {
            IsEdit = true;
            FModel = _mapper.Map<UserCreateFM>(EditModel);
            SiteRemoteDataQuery.AddParams("selectedId", FModel.SiteId);
            IntegratorRemoteDataQuery.AddParams("selectedId", FModel.IntegratorHash);
        }
    }

    public async Task UserTypeOnChange(ChangeEventArgs<int, LookupDto> args)
    {
        FModel.IntegratorHash = null;
        FModel.SiteId = null;

        //var obj = args.ItemData;
    }

    public async Task CancelClick()
    {
        OnCancelClicked.InvokeAsync();
    }

    protected async Task Submit()
    {
        if (EditModel == null)
        {
            var response = _apiService.HttpClient.PostAsJsonAsync<UserCreateFM>($"api/UsersManagement/PostUser", FModel);
            bool result = await response.Result.Content.ReadFromJsonAsync<bool>();
            if (result)
            {
                SubmitClickedArguments = new SubmitClickedArg(true, true);
                OnSubmitClicked.InvokeAsync(SubmitClickedArguments);
            }
            else
            {
                SubmitClickedArguments = new SubmitClickedArg(true, false);
                OnSubmitClicked.InvokeAsync(SubmitClickedArguments);
            }
            StateHasChanged();
        }
        else
        {
            var response = _apiService.HttpClient.PostAsJsonAsync<UserCreateFM>($"api/Users/EditUser", FModel);
            bool result = await response.Result.Content.ReadFromJsonAsync<bool>();
            if (result)
            {
                SubmitClickedArguments = new SubmitClickedArg(false, true);
                OnSubmitClicked.InvokeAsync(SubmitClickedArguments);
            }
            else
            {
                SubmitClickedArguments = new SubmitClickedArg(false, false);
                OnSubmitClicked.InvokeAsync(SubmitClickedArguments);
            }
            StateHasChanged();
        }

    }
}

<style>
    .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>