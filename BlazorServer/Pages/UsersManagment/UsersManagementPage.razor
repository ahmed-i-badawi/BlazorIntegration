@page "/Users"
@using BlazorServer.Services
@inject ApiService _apiService
@using AutoMapper
@using SharedLibrary.Arguments
@inject IMapper _mapper
@inject IClientOperations _clientOperations
@using Syncfusion.Blazor.Grids

<div>
    @if (IsProcessingItem)
    {
        <div>
            <UserCreateOrUpdateComponent EditModel="FModel"
                                     OnCancelClicked="CancelClicked"
                                     OnSubmitClicked="SubmitClicked" />
        </div>
    }
    else
    {
        <div>
            <BreadCrumbComponent Items="BreadCrumbItems" />
        </div>

        <div>
            <CustomFullGridComponent DTO="ApplicationUserDto"
                                 SfDataManagerUrl="api/UsersManagement/GetUsers"
                                 Delete="Delete"
                                 Add="Add">
                <GridColumnsTemplate>
                    <GridColumn Field=@nameof(ApplicationUserDto.UserName) HeaderText="User Name"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUserDto.FullName) HeaderText="Full Name"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUserDto.Email) HeaderText="Email"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUserDto.IsActive) HeaderText="Active">
                        <Template Context="cContext">
                            @{
                                var obj = ((ApplicationUserDto)cContext);
                                <span>@(obj.IsActive ? "Yes" : "No")</span>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(ApplicationUserDto.UserType) HeaderText="Type">
                        <Template Context="cContext">
                            @{
                                var obj = ((ApplicationUserDto)cContext);
                                <span>@obj.UserType.ToString()</span>
                            }
                        </Template>
                    </GridColumn>
                </GridColumnsTemplate>
            </CustomFullGridComponent>
        </div>
    }

</div>
@code {

    private List<Tuple<string, string, bool>> BreadCrumbItems { get; set; } = new List<Tuple<string, string, bool>>()
    {
        new Tuple<string, string, bool>("Dashboard", "/", false ),
        new Tuple<string, string, bool>("User", "/User", true )
    };


    private bool IsProcessingItem { get; set; } = false;
    public UserCreateFM FModel { get; set; } = null;

    public async Task<bool> Add(bool added)
    {
        IsProcessingItem = true;

        StateHasChanged();

        return false;
    }

    public async Task SubmitClicked(SubmitClickedArg submitClickedArg)
    {

        IsProcessingItem = false;

        if (submitClickedArg.IsNewRecord)
        {
            if (submitClickedArg.IsSuccess)
            {
                await _clientOperations.ShowToast("Create", "Created Successfully", "success");
            }
            else
            {
                await _clientOperations.ShowToast("Error", "Mission Incompleted", "error");
            }
        }
        else
        {
            if (submitClickedArg.IsSuccess)
            {
                await _clientOperations.ShowToast("Edit", "Updated Successfully", "success");
            }
            else
            {
                await _clientOperations.ShowToast("Error", "Mission Incompleted", "error");
            }
            FModel = null;
        }
    }

    public async Task CancelClicked()
    {
        IsProcessingItem = false;
        FModel = null;
    }

    public async Task Edit(ApplicationUserDto dto)
    {
        IsProcessingItem = true;

        FModel = _mapper.Map<UserCreateFM>(dto);

        StateHasChanged();
    }

    public async Task<bool> Delete(ApplicationUserDto dto)
    {
        //ActionsDisabled = true;

        var response = _apiService.HttpClient.PostAsJsonAsync("api/UsersManagement/DeleteUser", dto.Id);
        bool result = await response.Result.Content.ReadFromJsonAsync<bool>();
        if (!result)
        {
            await _clientOperations.ShowToast("Error", "Mission Incompleted", "error");
            return result;
        }
        else
        {
            await _clientOperations.ShowToast("Delete", "Deleted Successfully", "success");
            return result;

            //ActionsDisabled = false;
        }
    }

}
