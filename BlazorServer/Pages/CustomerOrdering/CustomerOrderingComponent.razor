@using System.Net.NetworkInformation
@using BlazorServer.Extensions
@using global::Shared.Commands
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServer.Services
@inject IHttpContextAccessor httpContextAccessor
@inject HttpClient _http

<h1>Blazor Hub</h1>

@if (MessageFM != null)
{
    <div class="container">
        <input type="number" id="BrandId" class="form-control" @bind="@MessageFM.BrandId" placeholder="BrandId" /><br />
        <input type="number" id="BranchId" class="form-control" @bind="@MessageFM.BranchId" placeholder="BranchId" /><br />
        <input type="text" id="Notes" class="form-control" @bind="@MessageFM.Notes" placeholder="Notes" /><br />

        <input type="button" id="Send Order" value="Send Order" class="btn btn-primary" @onclick="@Connect" disabled="@IsConnected" />
        <input type="button" id="new" value="new" class="btn btn-primary" @onclick="@GetMachine" />
        <ul id="discussion">
            @foreach (var message in _messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
}



@code {
    public MessageCommand MessageFM { get; set; } = new MessageCommand();
    HubConnection connection = null;
    private IList<string> _messages = new List<string>();
    private string _hubUrl;
    private string _username;
    private bool IsConnected => HubConnectionState.Connected == connection?.State;
    public string Status { get; set; }


    public void GetMachine()
    {
        DateTime start = DateTime.Now;
        Console.WriteLine (start);
        //var rr = MachineInfo.HardwareProfile();
        var ff = new SystemGuid();
        var rr = ff.ValueAsync();
    

        // Console.WriteLine (string.Join("-", rr.Values));
        Console.WriteLine (rr);

            var sfsdf = ff.DecodeValue(rr);
        Console.WriteLine (sfsdf);

        Console.WriteLine ((DateTime.Now - start));

    }


    protected async Task ConnectionHandler()
    {
        var dddddddd = httpContextAccessor.HttpContext;
        if (httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            _hubUrl = "https://localhost:7029/MessagingHub";
            connection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();
            await connection.StartAsync();

            MessageFM.connId = connection.ConnectionId;

            // --------------------
            var response = _http.PostAsJsonAsync("https://localhost:7029/api/Message/GetMessageStatus", MessageFM);
            Status = await response.Result.Content.ReadAsStringAsync();
            // --------------------

            connection.Closed += async (e) =>
            {
                await connection.StartAsync();
            };

            connection.On<MessageCommand>("ReceiveMessage", this.ReceiveMessage);
        }
    }

    protected async Task Connect()
    {

        await ConnectionHandler();
    }

    Task ReceiveMessage(MessageCommand dto)
    {
        //_messages.Add($"Branch: {dto.BranchId} - Brand: {dto.BranchId} - Notes: {dto.Notes} - Time: {DateTime.Now} - Status: {dto.StatusId}");
        _messages.Add($"Time: {DateTime.Now} - Status: {dto.StatusId} - co: {dto.connId}");
        StateHasChanged();
        return Task.CompletedTask;
    }

}
