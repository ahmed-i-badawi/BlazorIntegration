@using BlazorServer.Services
@using System.Net.Http.Headers
@inject ApiService _apiService
@inject IConfiguration configuration

<div class="container">

    <h3>Machine Registration Component</h3>

    @if (FModel != null)
    {
        <div class="row">
            <div class="col-6">
                <input type="text" id="Hash" class="form-control" @bind="@FModel.Hash" placeholder="Hash" /><br />
            </div>
            <div class="col-6">
                <input type="text" id="MachineName" class="form-control" @bind="@FModel.MachineName" placeholder="MachineName" /><br />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <input type="text" id="Notes" class="form-control" @bind="@FModel.Notes" placeholder="Notes" /><br />
            </div>
        </div>

        <input type="button" id="Add Machine" value="Add Machine" class="btn btn-primary" @onclick="@Submit" />

        <ul id="discussion">
            @foreach (var message in _messages)
            {
                <li>@message</li>
            }
        </ul>

    }
</div>

@code {
    public MachineRegistrationCommand FModel { get; set; } = new MachineRegistrationCommand();
    private IList<string> _messages = new List<string>();
    private string _username;
    public string Status { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FModel = new MachineRegistrationCommand();
        _apiService.HttpClient.BaseAddress = new Uri(configuration["API"]);
    }

    protected async Task Submit()
    {
        var register = _apiService.HttpClient.PostAsJsonAsync($"api/Machine/RegisterMachine", FModel);
        string registerRes = await register.Result.Content.ReadAsStringAsync();
        if (!string.IsNullOrWhiteSpace(registerRes))
        {
            _messages.Add($"For machine {FModel.MachineName}: {registerRes}");
        }
        else
        {
            _messages.Add($"Machine {FModel.MachineName}: Bad Request");
        }
        StateHasChanged();
    }
}
