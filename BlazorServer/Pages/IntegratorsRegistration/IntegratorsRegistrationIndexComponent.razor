@using BlazorServer.Extensions
@using BlazorServer.Services
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.SplitButtons;
@inject IClientOperations _clientOperations

    <div class="btn">
        <button type="button" onclick="@AddNewItem" class="btn btn-primary">Add</button>
    </div>
    <hr />
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid @ref="GridRef" TValue="IntegratorsDto"
                    AllowPaging="true"
                    AllowFiltering="true"
                    AllowReordering="true"
                    AllowResizing="true"
                    AllowSorting="true"
                    Height="500"
                    Width="100%"
                    AllowTextWrap="true">
                    <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                    <Syncfusion.Blazor.Data.SfDataManager Adaptor="Syncfusion.Blazor.Adaptors.UrlAdaptor" Url="api/IntegratorsRegistration/GetIntegrators"></Syncfusion.Blazor.Data.SfDataManager>
                    <GridPageSettings PageSize="10" PageCount="5" PageSizes="true"></GridPageSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(IntegratorsDto.Hash) HeaderText="Hash"></GridColumn>
                        <GridColumn Field=@nameof(IntegratorsDto.Name) HeaderText="Name"></GridColumn>
                        <GridColumn Field=@nameof(IntegratorsDto.Notes) HeaderText="Notes"></GridColumn>

                        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="250">
                            <Template>
                                <SfButtonGroup CssClass="e-round-corner" style="text-align:center">
                                    @{
                                        var obj = context as IntegratorsDto;
                                        if (Edit != null)
                                        {
                                            <button style="width:80px;" type="button" disabled="@IsActionsDisabled" onclick="@(() => Edit(obj))" class="btn btn-warning">Edit</button>
                                        }
                                        if (Delete != null)
                                        {
                                            <button style="width:80px;" type="button" disabled="@IsActionsDisabled" onclick="@(() => {Deleted(Delete(obj.Hash).Result);})" class="btn btn-danger">Delete</button>
                                        }
                                    }
                                </SfButtonGroup>
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>


@code {
    [Parameter]
    public bool AllowAdd { get; set; }

    [Parameter]
    public Func<IntegratorsDto, Task> Edit { get; set; }

    [Parameter]
    public Func<string, Task<bool>> Delete { get; set; }

    public SfGrid<IntegratorsDto> GridRef { get; set; }

    public bool IsActionsDisabled { get; set; }
    
    [Parameter]
    public EventCallback OnAddItem { get; set; }

    public async Task Deleted(bool deleted)
    {
        if (deleted)
        {
            await _clientOperations.ShowToast("Delete", "Deleted Successfully", "success");
            GridRef.Refresh();
        }
        else
        {
            await _clientOperations.ShowToast("Error", "Mission Incompleted", "error");
        }
    }

    public void AddNewItem()
    {
        OnAddItem.InvokeAsync();
    }
}
