@using BlazorServer.Extensions
@using BlazorServer.Services
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.SplitButtons;
@inject IClientOperations _clientOperations
@typeparam DTO

@if (Add != null)
{
    <div class="btn">
        @if (Back != null)
        {
            <button style="width:100px;" type="button" onclick="@(()=>Back())" class="btn btn-danger">Back</button>
        }
        <button style="width:100px;" type="button" disabled="@IsActionsDisabled" onclick="@(() => {Added(Add(true).Result);})" class="btn btn-primary">Add</button>
    </div>
    @*<hr />*@
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="GridRef" TValue="DTO" Query="Query"
                    AllowPaging="true"
                    AllowFiltering="true"
                    AllowReordering="true"
                    AllowResizing="true"
                    AllowSorting="true"
                    Height="@Height"
                    Width="100%"
                    AllowTextWrap="true">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <Syncfusion.Blazor.Data.SfDataManager Adaptor="Syncfusion.Blazor.Adaptors.UrlAdaptor" Url="@SfDataManagerUrl"></Syncfusion.Blazor.Data.SfDataManager>
                <GridPageSettings PageSize="10" PageCount="5" PageSizes="true"></GridPageSettings>
                <GridColumns>
                    @GridColumnsTemplate

                    @if (Edit != null || Delete != null)
                    {
                        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="200">
                            <Template Context="cContext">
                                <SfButtonGroup CssClass="e-round-corner" style="text-align:center">
                                    @{
                                        var obj = ((DTO)cContext);
                                        if (Edit != null)
                                        {
                                            <button style="width:80px;" type="button" disabled="@IsActionsDisabled" onclick="@(() => Edit(obj))" class="btn btn-warning">Edit</button>
                                        }
                                        if (Delete != null)
                                        {
                                            <button style="width:80px;" type="button" disabled="@IsActionsDisabled" onclick="@(() => {Deleted(Delete(obj).Result);})" class="btn btn-danger">Delete</button>
                                        }
                                    }
                                </SfButtonGroup>
                            </Template>
                        </GridColumn>
                    }
                </GridColumns>
                @if (GridDetailTemplate != null)
                {
                    <GridTemplates>
                        <DetailTemplate Context="cContect">

                            @GridDetailTemplate(cContect)

                        </DetailTemplate>
                    </GridTemplates>
                }
            </SfGrid>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string SfDataManagerUrl { get; set; }
    [Parameter]
    public RenderFragment GridColumnsTemplate { get; set; }

    [Parameter]
    public Query Query { get; set; }

    [Parameter]
    public string Height { get; set; } = "500";

    [Parameter]
    public RenderFragment<object> GridDetailTemplate { get; set; }

    [Parameter]
    public Func<DTO, Task> Edit { get; set; }

    [Parameter]
    public Func<DTO, Task<bool>> Delete { get; set; }

    [Parameter]
    public Func<bool, Task<bool>> Add { get; set; }

    public SfGrid<DTO> GridRef { get; set; }

    public bool IsActionsDisabled { get; set; }

    [Parameter]
    public Func<Task> Back { get; set; }

    public async Task Added(bool added)
    {
        if (added)
        {
            GridRef.Refresh();
        }
        else
        {
        }
    }

    public async Task Deleted(bool deleted)
    {
        if (deleted)
        {
            GridRef.Refresh();
        }
        else
        {
        }
    }

}
